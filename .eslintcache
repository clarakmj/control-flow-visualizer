[{"C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\index.js":"1","C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\reportWebVitals.js":"2","C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\App.js":"3","C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\Footer.jsx":"4","C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\Header.jsx":"5","C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\Editor.jsx":"6","C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\FlowChart.jsx":"7"},{"size":517,"mtime":1609301800444,"results":"8","hashOfConfig":"9"},{"size":375,"mtime":1609301800444,"results":"10","hashOfConfig":"9"},{"size":1247,"mtime":1610071370038,"results":"11","hashOfConfig":"9"},{"size":358,"mtime":1609316278382,"results":"12","hashOfConfig":"9"},{"size":309,"mtime":1609316440351,"results":"13","hashOfConfig":"9"},{"size":2658,"mtime":1609726623593,"results":"14","hashOfConfig":"9"},{"size":1311,"mtime":1609809947369,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1w2oai3",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\index.js",[],["34","35"],"C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\reportWebVitals.js",[],"C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\App.js",["36","37"],"C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\Footer.jsx",["38"],"import React from \"react\";\r\nimport App from \"./App\";\r\n\r\n/***\r\n * Footer component to display dynamic copyright year and names\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction Footer() {\r\n    const currentDate = new Date();\r\n    return <p>\r\n        Copyright Â©{currentDate.getFullYear()} Tiger Z & Clara K\r\n    </p>\r\n}\r\n\r\nexport default Footer;","C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\Header.jsx",[],"C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\Editor.jsx",["39","40","41","42","43","44"],"import React from 'react';\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-noconflict/mode-c_cpp\";\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\nimport diamondTest from \"./images/diamondtest.jpg\"\r\n\r\nconst keywords = [\"if\", \"else\", \"while\", \"for\", \"return\", \"true\", \"false\"]\r\nconst splitter = new RegExp(\"\\s+|\\(|\\)|[;]\") //TODO: make correct RegExp (current one doesn't work)\r\nlet cfDiagram = <img src={diamondTest} alt=\"testing\"/>;\r\n\r\nclass Editor extends React.Component {\r\n    /***\r\n     * constructs the Editor with content set to null\r\n     *\r\n     * @param props\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: null,\r\n            words: null\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    /***\r\n     * dynamically set the content to current text in editor\r\n     *\r\n     * @param newValue\r\n     */\r\n    onChange(newValue) {\r\n        this.setState({content: newValue});\r\n        let content = newValue.toString().split(\" \"); //TODO: replace with splitter\r\n        let important = [];\r\n        for (let i = 0; i < content.length; i++) {\r\n            if (keywords.includes(content[i])) {\r\n                important.push(content[i]);\r\n                this.setState({words: important})\r\n                console.log(this.state.words);\r\n            }\r\n        }\r\n    }\r\n\r\n    //TODO: function to take array of strings to convert to an image\r\n    visualize(content) {\r\n        const diagram = content.map(() =>\r\n            <img src={diamondTest}/>\r\n            );\r\n        cfDiagram = <div>{diagram}</div>;\r\n    }\r\n\r\n    run() {\r\n        //TODO: send to node server to compile\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <table class=\"center\">\r\n                    <AceEditor\r\n                        mode=\"c_cpp\"\r\n                        theme=\"monokai\"\r\n                        onChange={this.onChange}\r\n                        content={this.state.content}\r\n                        setOptions={\r\n                            {\r\n                                enableBasicAutocompletion: true,\r\n                                enableLiveAutocompletion: true,\r\n                                tabSize: 2\r\n                            }\r\n                        }\r\n                    />\r\n                    {/*cfDiagram*/}\r\n                </table>\r\n                <button\r\n                    className=\"run\"\r\n                    onClick={ () => this.visualize(this.state.words)}\r\n                    >\r\n                    Run\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Editor;","C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\FlowChart.jsx",["45"],"import React from 'react';\r\nimport ReactFlow from 'react-flow-renderer';\r\n\r\nlet code = [];\r\nlet elements = [  { id: '1', type: 'input', data: { label: 'Node 1' }, position: { x: 250, y: 5 } },\r\n    // you can also pass a React Node as a label\r\n    { id: '2', data: { label: <div>Node 2</div> }, position: { x: 100, y: 100 } },\r\n    { id: 'e1-2', source: '1', target: '2', animated: true }\r\n    ];\r\n\r\nclass FlowChart extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        code = props;\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.props.onChange\r\n    }\r\n\r\n    newNode(id_, type_, data_, x_, y_) {\r\n        return {\r\n            id: id_,\r\n            type: type_,\r\n            data: data_,\r\n            position: {x: x_, y: y_},\r\n            draggable: false,\r\n            selectable: false\r\n        }\r\n    }\r\n\r\n    newEdge(id_, source_, target_, label_) {\r\n        return {\r\n            id: id_,\r\n            source: source_,\r\n            target: target_,\r\n            type: 'smoothedge',\r\n            label: label_,\r\n            arrowHeadType: 'arrow'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ height: 800, width: 500}}>\r\n                <ReactFlow elements={elements} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FlowChart;",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":7,"column":7,"nodeType":"52","messageId":"53","endLine":7,"endColumn":13},{"ruleId":"50","severity":1,"message":"54","line":8,"column":5,"nodeType":"52","messageId":"53","endLine":8,"endColumn":9},{"ruleId":"50","severity":1,"message":"55","line":2,"column":8,"nodeType":"52","messageId":"53","endLine":2,"endColumn":11},{"ruleId":"50","severity":1,"message":"56","line":8,"column":7,"nodeType":"52","messageId":"53","endLine":8,"endColumn":15},{"ruleId":"57","severity":1,"message":"58","line":8,"column":30,"nodeType":"59","messageId":"60","endLine":8,"endColumn":31,"suggestions":"61"},{"ruleId":"57","severity":1,"message":"62","line":8,"column":34,"nodeType":"59","messageId":"60","endLine":8,"endColumn":35,"suggestions":"63"},{"ruleId":"57","severity":1,"message":"64","line":8,"column":37,"nodeType":"59","messageId":"60","endLine":8,"endColumn":38,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":47,"column":13,"nodeType":"68","endLine":47,"endColumn":37},{"ruleId":"50","severity":1,"message":"69","line":49,"column":9,"nodeType":"52","messageId":"53","endLine":49,"endColumn":18},{"ruleId":"50","severity":1,"message":"54","line":14,"column":9,"nodeType":"52","messageId":"53","endLine":14,"endColumn":13},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'editor' is assigned a value but never used.","Identifier","unusedVar","'code' is assigned a value but never used.","'App' is defined but never used.","'splitter' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\s.","Literal","unnecessaryEscape",["72","73"],"Unnecessary escape character: \\(.",["74","75"],"Unnecessary escape character: \\).",["76","77"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'cfDiagram' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"78","fix":"79","desc":"80"},{"messageId":"81","fix":"82","desc":"83"},{"messageId":"78","fix":"84","desc":"80"},{"messageId":"81","fix":"85","desc":"83"},{"messageId":"78","fix":"86","desc":"80"},{"messageId":"81","fix":"87","desc":"83"},"removeEscape",{"range":"88","text":"89"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"90","text":"91"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"92","text":"89"},{"range":"93","text":"91"},{"range":"94","text":"89"},{"range":"95","text":"91"},[322,323],"",[322,322],"\\",[326,327],[326,326],[329,330],[329,329]]