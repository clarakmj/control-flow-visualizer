[{"C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\index.js":"1","C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\reportWebVitals.js":"2","C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\App.js":"3","C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\Header.jsx":"4","C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\Footer.jsx":"5","C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\FlowChart.jsx":"6","C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\Editor.jsx":"7"},{"size":517,"mtime":1609301800444,"results":"8","hashOfConfig":"9"},{"size":375,"mtime":1609301800444,"results":"10","hashOfConfig":"9"},{"size":1427,"mtime":1610132052797,"results":"11","hashOfConfig":"9"},{"size":309,"mtime":1610132052798,"results":"12","hashOfConfig":"9"},{"size":358,"mtime":1610132052798,"results":"13","hashOfConfig":"9"},{"size":4713,"mtime":1610675801140,"results":"14","hashOfConfig":"9"},{"size":3261,"mtime":1610244573588,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1w2oai3",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\index.js",[],["35","36"],"C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\reportWebVitals.js",[],"C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\App.js",[],"C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\Header.jsx",[],"C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\Footer.jsx",["37"],"import React from \"react\";\r\nimport App from \"./App\";\r\n\r\n/***\r\n * Footer component to display dynamic copyright year and names\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction Footer() {\r\n    const currentDate = new Date();\r\n    return <p>\r\n        Copyright Â©{currentDate.getFullYear()} Tiger Z & Clara K\r\n    </p>\r\n}\r\n\r\nexport default Footer;",["38","39"],"C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\FlowChart.jsx",["40","41","42","43","44","45","46","47","48","49","50"],"import React, {useState, useEffect} from 'react';\r\nimport ReactFlow from 'react-flow-renderer';\r\n\r\n// let code = \"\";\r\n// let elements = [  { id: '1', type: 'input', data: { label: 'Node 1' }, position: { x: 250, y: 5 } },\r\n//     // you can also pass a React Node as a label\r\n//     { id: '2', data: { label: <div>Node 2</div> }, position: { x: 100, y: 100 } },\r\n//     { id: 'e1-2', source: '1', target: '2', animated: true }\r\n//     ];\r\n\r\nconst keywords = [\"if\", \"else\", \"while\", \"for\", \"return\", \"true\", \"false\", \"case\", \"switch\", \"\"]\r\nconst X_INIT = 10;\r\nconst Y_INIT = 150;\r\nconst VERT_SPACE = 55\r\nconst HORI_SPACE = 180;\r\n//const splitter = new RegExp(\"\\s*[{}]?\\n\\s*}?\\s*\");\r\nconst openBracket = new RegExp(\"\\s*{\\s*\");\r\nconst closeBracket = new RegExp(\"\\s*}\\s*\");\r\n\r\nfunction FlowChart(props) {\r\n    const [content, setContent] = useState([]);\r\n\r\n    useEffect(() => {\r\n            const elements = parseCode(props.text);\r\n            setContent(elements);\r\n            console.log(content);\r\n    }, [props.text])\r\n\r\n    function toNextBracket(code, index) {\r\n        let text = \"\";\r\n        while (code[index] != \"{\" && index < code.length) {\r\n            text += (\" \" + code[index]);\r\n            index++;\r\n        }\r\n        return [text, index];\r\n    }\r\n\r\n    function connectBooleans(booleans, brackets, id, elements) {\r\n        while (booleans.length) {\r\n            if (booleans[booleans.length - 1][1] >= brackets) {\r\n                let boolID = booleans.pop()[0];\r\n                elements.push(newEdge(\"e\" + String(boolID) + \"f\",\r\n                    String(boolID),\r\n                    String(id),\r\n                    \"F\"))\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return booleans;\r\n    }\r\n\r\n    function parseCode(code) {\r\n        code = code.split(/\\s+/);\r\n        let elements = [];\r\n        let [label, index] = toNextBracket(code, 0);\r\n        elements.push(newNode('0', 'input', label, X_INIT, Y_INIT));\r\n        let id = 1;\r\n        let brackets = -1;\r\n        let booleans = []; //stores ID of boolean node and its indentation number\r\n        let edgeLabel = \"\";\r\n        for (index; index < code.length - 1; index++) {\r\n            switch (code[index]) {\r\n                case \"{\":\r\n                    brackets++;\r\n                    break;\r\n                case \"}\":\r\n                    brackets--;\r\n                    break;\r\n                case \"if\":\r\n                    let ifIndex = index;\r\n                    [label, index] = toNextBracket(code, index);\r\n                    elements.push(newNode(String(id),\r\n                        'default',\r\n                        label,\r\n                        X_INIT + brackets * HORI_SPACE,\r\n                        Y_INIT + id * VERT_SPACE));\r\n                    if (code[ifIndex - 1] == \"}\") {\r\n                        booleans = connectBooleans(booleans, brackets, id, elements);\r\n                    }\r\n                    booleans.push([id, brackets]);\r\n                    brackets++;\r\n                    elements.push(newEdge(\"e\" + String(id), String(id - 1), String(id), edgeLabel));\r\n                    edgeLabel = \"T\";\r\n                    id++;\r\n                    break;\r\n                default:\r\n                    label = code[index];\r\n                    elements.push(newNode(String(id),\r\n                        'default',\r\n                        label,\r\n                        X_INIT + brackets * HORI_SPACE,\r\n                        Y_INIT + id * VERT_SPACE));\r\n                    console.log(label);\r\n                    if (code[index - 1] == \"}\") {\r\n                        booleans = connectBooleans(booleans, brackets, id, elements)\r\n                    }\r\n                    elements.push(newEdge(\"e\" + String(id), String(id - 1), String(id), edgeLabel));\r\n                    edgeLabel = \"\";\r\n                    id++;\r\n                    break;\r\n            }\r\n        }\r\n        return elements;\r\n    }\r\n\r\n    function newNode(id_, type_, label_, x_, y_) {\r\n        return {\r\n            id: id_,\r\n            type: type_,\r\n            data: {\r\n                label: label_\r\n            },\r\n            position: {x: x_, y: y_},\r\n            draggable: false,\r\n            selectable: false\r\n        }\r\n    }\r\n\r\n    function newEdge(id_, source_, target_, label_) {\r\n        return {\r\n            id: id_,\r\n            source: source_,\r\n            target: target_,\r\n            type: 'smoothedge',\r\n            label: label_,\r\n            arrowHeadType: 'arrow'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{ height: 800, width: 500}}>\r\n            <ReactFlow elements={content} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FlowChart;","C:\\Users\\TigerZhao\\WebstormProjects\\control-flow-visualizer\\src\\Editor.jsx",["51","52","53","54","55","56"],"import React, {useState} from 'react';\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-noconflict/mode-c_cpp\";\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\nimport diamondTest from \"./images/diamondtest.jpg\"\r\n\r\n\r\nconst splitter = new RegExp(\"\\s+|\\(|\\)|[;]\") //TODO: make correct RegExp (current one doesn't work)\r\nlet cfDiagram = <img src={diamondTest} alt=\"testing\"/>;\r\n\r\nfunction Editor(props) {\r\n    /***\r\n     * dynamically set the content to current text in editor\r\n     *\r\n     * @param newValue\r\n     */\r\n    function onChange(newValue) {\r\n        props.updateCode(newValue);\r\n    }\r\n\r\n    return (\r\n        <AceEditor\r\n            mode=\"c_cpp\"\r\n            theme=\"monokai\"\r\n            onChange={onChange}\r\n            setOptions={\r\n                {\r\n                    enableBasicAutocompletion: true,\r\n                    enableLiveAutocompletion: true,\r\n                    tabSize: 2\r\n                }\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\n// class Editor extends React.Component {\r\n//     /***\r\n//      * constructs the Editor with content set to null\r\n//      *\r\n//      * @param props\r\n//      */\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//             content: null,\r\n//             words: null\r\n//         };\r\n//         this.onChange = this.onChange.bind(this);\r\n//     }\r\n//\r\n//     onChange(newValue) {\r\n//         this.setState({content: newValue});\r\n//         let content = newValue.toString().split(\" \"); //TODO: replace with splitter\r\n//         let important = [];\r\n//         for (let i = 0; i < content.length; i++) {\r\n//             if (keywords.includes(content[i])) {\r\n//                 important.push(content[i]);\r\n//                 this.setState({words: important})\r\n//                 console.log(this.state.words);\r\n//             }\r\n//         }\r\n//     }\r\n//\r\n//     //TODO: function to take array of strings to convert to an image\r\n//     visualize(content) {\r\n//         const diagram = content.map(() =>\r\n//             <img src={diamondTest}/>\r\n//         );\r\n//         cfDiagram = <div>{diagram}</div>;\r\n//     }\r\n//\r\n//     run() {\r\n//         //TODO: send to node server to compile\r\n//     }\r\n//\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 <table class=\"center\">\r\n//                     <AceEditor\r\n//                         mode=\"c_cpp\"\r\n//                         theme=\"monokai\"\r\n//                         onChange={this.onChange}\r\n//                         content={this.state.content}\r\n//                         setOptions={\r\n//                             {\r\n//                                 enableBasicAutocompletion: true,\r\n//                                 enableLiveAutocompletion: true,\r\n//                                 tabSize: 2\r\n//                             }\r\n//                         }\r\n//                     />\r\n//                     {/*cfDiagram*/}\r\n//                 </table>\r\n//                 <button\r\n//                     className=\"run\"\r\n//                     onClick={() => this.visualize(this.state.words)}\r\n//                 >\r\n//                     Run\r\n//                 </button>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nexport default Editor;",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":2,"column":8,"nodeType":"63","messageId":"64","endLine":2,"endColumn":11},{"ruleId":"57","replacedBy":"65"},{"ruleId":"59","replacedBy":"66"},{"ruleId":"61","severity":1,"message":"67","line":11,"column":7,"nodeType":"63","messageId":"64","endLine":11,"endColumn":15},{"ruleId":"61","severity":1,"message":"68","line":17,"column":7,"nodeType":"63","messageId":"64","endLine":17,"endColumn":18},{"ruleId":"69","severity":1,"message":"70","line":17,"column":33,"nodeType":"71","messageId":"72","endLine":17,"endColumn":34,"suggestions":"73"},{"ruleId":"69","severity":1,"message":"70","line":17,"column":37,"nodeType":"71","messageId":"72","endLine":17,"endColumn":38,"suggestions":"74"},{"ruleId":"61","severity":1,"message":"75","line":18,"column":7,"nodeType":"63","messageId":"64","endLine":18,"endColumn":19},{"ruleId":"69","severity":1,"message":"70","line":18,"column":34,"nodeType":"71","messageId":"72","endLine":18,"endColumn":35,"suggestions":"76"},{"ruleId":"69","severity":1,"message":"70","line":18,"column":38,"nodeType":"71","messageId":"72","endLine":18,"endColumn":39,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":27,"column":8,"nodeType":"80","endLine":27,"endColumn":20,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":31,"column":28,"nodeType":"84","messageId":"85","endLine":31,"endColumn":30},{"ruleId":"82","severity":1,"message":"86","line":78,"column":43,"nodeType":"84","messageId":"85","endLine":78,"endColumn":45},{"ruleId":"82","severity":1,"message":"86","line":95,"column":41,"nodeType":"84","messageId":"85","endLine":95,"endColumn":43},{"ruleId":"61","severity":1,"message":"87","line":1,"column":16,"nodeType":"63","messageId":"64","endLine":1,"endColumn":24},{"ruleId":"61","severity":1,"message":"88","line":8,"column":7,"nodeType":"63","messageId":"64","endLine":8,"endColumn":15},{"ruleId":"69","severity":1,"message":"70","line":8,"column":30,"nodeType":"71","messageId":"72","endLine":8,"endColumn":31,"suggestions":"89"},{"ruleId":"69","severity":1,"message":"90","line":8,"column":34,"nodeType":"71","messageId":"72","endLine":8,"endColumn":35,"suggestions":"91"},{"ruleId":"69","severity":1,"message":"92","line":8,"column":37,"nodeType":"71","messageId":"72","endLine":8,"endColumn":38,"suggestions":"93"},{"ruleId":"61","severity":1,"message":"94","line":9,"column":5,"nodeType":"63","messageId":"64","endLine":9,"endColumn":14},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar",["95"],["96"],"'keywords' is assigned a value but never used.","'openBracket' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\s.","Literal","unnecessaryEscape",["97","98"],["99","100"],"'closeBracket' is assigned a value but never used.",["101","102"],["103","104"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'content' and 'parseCode'. Either include them or remove the dependency array.","ArrayExpression",["105"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'useState' is defined but never used.","'splitter' is assigned a value but never used.",["106","107"],"Unnecessary escape character: \\(.",["108","109"],"Unnecessary escape character: \\).",["110","111"],"'cfDiagram' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"112","fix":"113","desc":"114"},{"messageId":"115","fix":"116","desc":"117"},{"messageId":"112","fix":"118","desc":"114"},{"messageId":"115","fix":"119","desc":"117"},{"messageId":"112","fix":"120","desc":"114"},{"messageId":"115","fix":"121","desc":"117"},{"messageId":"112","fix":"122","desc":"114"},{"messageId":"115","fix":"123","desc":"117"},{"desc":"124","fix":"125"},{"messageId":"112","fix":"126","desc":"114"},{"messageId":"115","fix":"127","desc":"117"},{"messageId":"112","fix":"128","desc":"114"},{"messageId":"115","fix":"129","desc":"117"},{"messageId":"112","fix":"130","desc":"114"},{"messageId":"115","fix":"131","desc":"117"},"removeEscape",{"range":"132","text":"133"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"134","text":"135"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"136","text":"133"},{"range":"137","text":"135"},{"range":"138","text":"133"},{"range":"139","text":"135"},{"range":"140","text":"133"},{"range":"141","text":"135"},"Update the dependencies array to be: [content, parseCode, props.text]",{"range":"142","text":"143"},{"range":"144","text":"133"},{"range":"145","text":"135"},{"range":"146","text":"133"},{"range":"147","text":"135"},{"range":"148","text":"133"},{"range":"149","text":"135"},[714,715],"",[714,714],"\\",[718,719],[718,718],[759,760],[759,759],[763,764],[763,763],[1006,1018],"[content, parseCode, props.text]",[260,261],[260,260],[264,265],[264,264],[267,268],[267,267]]